{"version":3,"sources":["Layer.js","App.js","serviceWorker.js","index.js"],"names":["Layer","props","react_default","a","createElement","onClick","onRemove","className","name","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onAdd","option","setState","layers","concat","toConsumableArray","state","count","targetIndex","filter","_","index","renderOption","key","options","_this2","_this$state","map","layer","i","renderCounter","renderCheese","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sOAEe,SAASA,EAAMC,GAC5B,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,QAASJ,EAAMK,UACzBJ,EAAAC,EAAAC,cAAA,OAAKG,UAAWN,EAAMO,MAAOP,EAAMO,WC4GxBC,cA1Gb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QASFI,MAAQ,SAACC,GAMPR,EAAKS,SAAS,CACZC,OAAM,GAAAC,OAAAV,OAAAW,EAAA,EAAAX,CAAMD,EAAKa,MAAMH,QAAjB,CAAyBF,IAC/BM,MAAOd,EAAKa,MAAMC,MAAQ,KAlBhBd,EAsBdJ,SAAW,SAACmB,GACVf,EAAKS,SAAS,CACZC,OAAQV,EAAKa,MAAMH,OAAOM,OAAO,SAACC,EAAGC,GAAJ,OAAcA,IAAUH,IACzDD,MAAOd,EAAKa,MAAMC,MAAQ,KAzBhBd,EA0CdmB,aAAe,SAACX,EAAQU,GACtB,OAAO1B,EAAAC,EAAAC,cAAA,UACLC,QAAS,kBAAMK,EAAKO,MAAMC,IAC1BY,IAAKF,GACFV,IA3CLR,EAAKa,MAAQ,CACXQ,QAAS,CAAC,SAAU,SAAU,MAAO,OAAQ,WAC7CX,OAAQ,GACRI,MAAO,GANGd,+EAmDZ,OAAyB,IAArBG,KAAKU,MAAMC,MAEXtB,EAAAC,EAAAC,cAAA,oBAIAF,EAAAC,EAAAC,cAAA,SAAIS,KAAKU,MAAMC,MAAf,kDAMJ,MAA2B,WAAvBX,KAAKU,MAAMQ,QACL,KAGR7B,EAAAC,EAAAC,cAAA,0EAKK,IAAA4B,EAAAnB,KAAAoB,EACqBpB,KAAKU,MAAzBH,EADDa,EACCb,OAAQW,EADTE,EACSF,QAChB,OACE7B,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OAEbL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,WAKZwB,EAAQG,IAAIrB,KAAKgB,eAGpB3B,EAAAC,EAAAC,cAAA,OAAKG,UAAU,SACZa,EAAOc,IAAI,SAACC,EAAOC,GAAR,OACVlC,EAAAC,EAAAC,cAACJ,EAAD,CACE8B,IAAKM,EACLR,MAAOQ,EACP5B,KAAM2B,EACN7B,SAAU,kBAAM0B,EAAK1B,SAAS8B,SAKpClC,EAAAC,EAAAC,cAAA,OAAKG,UAAU,WACbL,EAAAC,EAAAC,cAAA,SAAIS,KAAKwB,gBAAT,IAA2BxB,KAAKyB,yBAnGxBC,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5C,EAAAC,EAAAC,cAAC2C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.c6c37d78.chunk.js","sourcesContent":["import React from 'react'\n\nexport default function Layer(props) {\n  return <div onClick={props.onRemove}>\n    <div className={props.name}>{props.name}</div>\n    </div>\n}\n","import React, { Component } from 'react';\nimport './App.css';\nimport Layer from './Layer'\n\nclass App extends Component {\n\n  constructor() {\n    super()\n    // this.handleClick = this.handleClick.bind(this)\n    this.state = {\n      options: ['cheese', 'tomato', 'bun', 'beef', 'lettuce'],\n      layers: [],\n      count: 0\n    }\n  }\n\n  onAdd = (option) => {\n    // making copies in javascript\n    // const newLayers = this.state.layers.slice(0) // slice is making a copy of the existing array from the current array starting from index 0\n    // const newLayers = [...this.state.layers] // array spread\n    // const newLayers = Array.from(this.state.layers)\n    // newLayers.push('new layer')\n    this.setState({\n      layers: [...this.state.layers, option], // 'new layer' can be before or at the end\n      count: this.state.count + 1\n    })\n  }\n\n  onRemove = (targetIndex) => {\n    this.setState({\n      layers: this.state.layers.filter((_, index) => index !== targetIndex),\n      count: this.state.count - 1\n    })\n  }\n\n  // renderLayer = (layer, index) => {\n  //   return <Layer label={layer} />\n  //     <div>\n  //       <div\n  //         onClick={() => this.onRemove(index)} \n  //         key={index} \n  //         className={`layer ${layer}`}>\n  //           {layer}\n  //       </div>\n  //     </div>\n    \n  // }\n\n  renderOption = (option, index) => {\n    return <button \n      onClick={() => this.onAdd(option)}\n      key={index}>\n        {option}\n      </button>\n  }\n\n  renderCounter() {\n    if (this.state.count === 1) {\n      return (\n        <p>1 layer</p>\n      );\n    } else {\n      return (\n        <p>{this.state.count} layers</p>\n      );\n    }\n  }\n\n  renderCheese() {\n    if (this.state.options !== 'cheese') {\n      return (null);\n    } else {\n      return ( \n      <p> with single layer of cheese</p> \n      );\n    }\n  }\n\n  render() {\n    const { layers, options } = this.state\n    return (\n      <div className=\"App\">\n        \n        <div className=\"options\">\n          {/* <button onClick={() => this.onAdd('tomato')}>tomato</button>\n          <button onClick={() => this.onAdd('cheese')}>cheese</button>\n          <button onClick={() => this.onAdd('pineapple')}>pineapple</button> */}\n          {/* {options.map(option => <button>{option}</button>)} - would need to hv {options} inside const above as well */}\n          {options.map(this.renderOption)}\n        </div>\n\n        <div className=\"plate\">\n          {layers.map((layer, i) => \n            <Layer\n              key={i} \n              index={i}\n              name={layer} \n              onRemove={() => this.onRemove(i)} \n            />)}\n          {/* {layers.map(this.renderLayer)} */}\n        </div>\n\n        <div className=\"counter\">\n          <p>{this.renderCounter()} {this.renderCheese()}</p>\n        </div>\n        \n      </div>\n    );\n  }\n}\n\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}